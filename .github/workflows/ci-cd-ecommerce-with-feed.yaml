name: E-Commerce CI with Feed

on:
  workflow_dispatch:
    inputs:
      ssh-host:
        description: EC2 Instance ID, public DNS or IP
        required: true
      ssh-port:
        description: SSH port
        required: false
        default: '22'
      ssh-user:
        description: SSH username (ubuntu|ec2-user)
        required: true
        default: ubuntu
      aws-region:
        description: AWS region (only needed if ssh-host is an EC2 instance-id)
        required: false
        default: us-east-1
      service-user:
        description: Systemd user on EC2 (ubuntu|ec2-user|flaskapp)
        required: true
        default: ubuntu
      venv-dir:
        description: Venv path on EC2
        required: true
        default: /opt/flaskapp/venv
  push:
    branches:
      - main
      - dev
      - 'feature/**'
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-and-publish-to-feed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 black isort mypy bandit
          pip install build
          pip install build twine
      
      - name: Set version from run number
        id: bump
        run: |
          python - <<'PY'
          import tomllib, re, pathlib, os
          p = pathlib.Path('pyproject.toml')
          s = p.read_text(encoding='utf-8')
          d = tomllib.loads(s)
          name = d["project"]["name"]
          ver  = d["project"]["version"]
          parts = (ver.split('.') + ['0','0','0'])[:3]
          major, minor = parts[0], parts[1]
          new_ver = f"{major}.{minor}.{os.environ['GITHUB_RUN_NUMBER']}"
          s = re.sub(r'^version\s*=\s*".*"', f'version = "{new_ver}"', s, flags=re.M)
          p.write_text(s, encoding='utf-8')
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"name={name}\nversion={new_ver}\n")
          print(f"{name} -> {new_ver}")
          PY
      
      - name: Build (sdist + wheel)
        run: python -m build      

      - name: Run Unit Tests
        run: |
          pytest tests/ -v --tb=short
        
      - name: Run Integration Tests
        run: |
          pytest tests/integration/ -v --tb=short
        continue-on-error: false
      
      - name: Configure .pypirc (upload)
        run: |
          cat > ~/.pypirc <<'EOF'
          [distutils]
          index-servers =
              azure

          [azure]
          repository = https://pkgs.dev.azure.com/${{ secrets.AZDO_ORG }}/${{ secrets.AZDO_PROJECT }}/_packaging/${{ secrets.AZDO_FEED }}/pypi/upload/
          username = azdo
          password = ${{ secrets.AZDO_PAT }}
          EOF
          chmod 600 ~/.pypirc
      
      - name: Publish to feed
        run: twine upload --repository azure dist/*

      - name: Verify install (no upstream caching)
        env:
          FEED: https://azdo:${{ secrets.AZDO_PAT }}@pkgs.dev.azure.com/${{ secrets.AZDO_ORG }}/${{ secrets.AZDO_PROJECT }}/_packaging/${{ secrets.AZDO_FEED }}/pypi/simple/
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          # Feed nur wenn nÃ¶tig; Dependencies kommen von PyPI
          pip install --index-url https://pypi.org/simple --extra-index-url "$FEED" "${{ steps.bump.outputs.name }}==${{ steps.bump.outputs.version }}"
     
      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-dist
          path: dist/*


